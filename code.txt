from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def testing(test_data):
    result = []
    for i in range(len(test_data)):
        res = knn.predict(pd.DataFrame([test_data[i]], columns = ['Height', 'Weight', 'BMI']))
        result.append(res[0])
    return result

def df_to_list(df):
    return df.values.tolist()

def plot_results(test_data, predicted_labels):
    plt.figure(figsize=(10, 6))

    heights, weights, bmis = zip(*test_data)
    label_colors = {
        'Normal Weight': 'green',
        'Overweight': 'blue',
        'Underweight': 'purple',
        'Obese': 'red'
    }
    unique_labels = set(predicted_labels)  # Collect unique labels

    for label in unique_labels:
        indices = [i for i, lbl in enumerate(predicted_labels) if lbl == label]
        plt.scatter(
            [heights[i] for i in indices],
            [weights[i] for i in indices],
            color=label_colors[label],
            label=label,
            s=100
        )

    plt.xlabel('Height')
    plt.ylabel('Weight')
    plt.title('KNN Classifier Results')
    plt.legend(loc='upper left')
    plt.show()

if __name__ == '__main__':    
    obese_data = pd.read_csv("C://Users//Admin//Documents//2022178034//dataset//obese_dataset.csv")
    print(obese_data)
    data = obese_data[['Height', 'Weight', 'BMI']]
    target = obese_data[['Label']]

    X_train, X_test, y_train, y_test = train_test_split(data, target, test_size = 0.3)
    knn = KNeighborsClassifier(n_neighbors=5)
    knn.fit(X_train, y_train)
    print()
    pred_res = knn.predict(X_test)
    print(pred_res)
    print()
    print('Score', knn.score(X_test, y_test))

    test_data = [[175, 80, 25.3], [180, 90, 27.3], [150, 50, 20.0], [210, 120, 37.2]]
    # Result = 'Normal Weight', 'Overweight', 'Underweight', 'Obese'
    
    print()
    print('Result', testing(test_data))
    
    X_test_list = df_to_list(X_test)
    predicted_labels = testing(X_test_list)
    plot_results(X_test_list, predicted_labels)
